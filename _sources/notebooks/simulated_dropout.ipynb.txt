{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulated single cell expression data with dropout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This example uses TACCO to annotate simulated single cell data, simulated using a modified variant (Moriel) of scsim (Kotliar).\n",
    "\n",
    "(Moriel): Moriel, N. Extension of scsim single-cell RNA-sequencing data simulations. github.com/nitzanlab/scsim-ext (2023)\n",
    "\n",
    "(Kotliar): Kotliar, D. scsim: simulate single-cell RNA-SEQ data using the Splatter statistical framework but implemented in python. github.com/dylkot/scsim (2021)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T14:30:18.533307Z",
     "iopub.status.busy": "2023-02-15T14:30:18.532894Z",
     "iopub.status.idle": "2023-02-15T14:30:22.692272Z",
     "shell.execute_reply": "2023-02-15T14:30:22.691171Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import matplotlib\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.sparse\n",
    "import scanpy as sc\n",
    "\n",
    "import tacco as tc\n",
    "from scsim import scsim\n",
    "\n",
    "# The notebook expects to be executed either in the workflow directory or in the repository root folder...\n",
    "sys.path.insert(1, os.path.abspath('workflow' if os.path.exists('workflow/common_code.py') else '..')) \n",
    "import common_code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T14:30:22.697047Z",
     "iopub.status.busy": "2023-02-15T14:30:22.696516Z",
     "iopub.status.idle": "2023-02-15T14:30:22.701270Z",
     "shell.execute_reply": "2023-02-15T14:30:22.700426Z"
    }
   },
   "outputs": [],
   "source": [
    "env_path = common_code.find_path('results/env_links')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate single cell data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simulate data with various dropout levels with a known ground truth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T14:30:22.705479Z",
     "iopub.status.busy": "2023-02-15T14:30:22.704780Z",
     "iopub.status.idle": "2023-02-15T15:39:26.057618Z",
     "shell.execute_reply": "2023-02-15T15:39:26.056665Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulating cells\n",
      "Simulating gene params\n",
      "Simulating program\n",
      "Simulating DE\n",
      "Simulating cell-gene means\n",
      "   - Getting mean for activity program carrying cells\n",
      "   - Getting mean for non activity program carrying cells\n",
      "   - Normalizing by cell libsize\n",
      "Simulating doublets\n",
      "Adjusting means\n",
      "Simulating counts with scsim\n"
     ]
    }
   ],
   "source": [
    "ngenes = 25000\n",
    "descale = 1.0\n",
    "ndoublets = 100\n",
    "K = 13\n",
    "nproggenes = 1000\n",
    "proggroups = [1,2,3,4]\n",
    "progcellfrac = .35\n",
    "ncells = 1500\n",
    "deprob = .025\n",
    "\n",
    "seed = 111\n",
    "\n",
    "deloc = 2.0\n",
    "\n",
    "# simulating true counts (in simulator.counts)\n",
    "simulator = scsim(ngenes=ngenes, ncells=ncells, ngroups=K, libloc=7.64, libscale=0.78,\n",
    "             mean_rate=7.68,mean_shape=0.34, expoutprob=0.00286,\n",
    "             expoutloc=6.15, expoutscale=0.49,\n",
    "             diffexpprob=deprob, diffexpdownprob=0., diffexploc=deloc, diffexpscale=descale,\n",
    "             bcv_dispersion=0.448, bcv_dof=22.087, ndoublets=ndoublets,\n",
    "             nproggenes=nproggenes, progdownprob=0., progdeloc=deloc,\n",
    "             progdescale=descale, progcellfrac=progcellfrac, proggoups=proggroups,\n",
    "             minprogusage=.1, maxprogusage=.7, seed=seed)\n",
    "simulator.simulate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T15:39:26.062126Z",
     "iopub.status.busy": "2023-02-15T15:39:26.061616Z",
     "iopub.status.idle": "2023-02-15T15:40:03.226273Z",
     "shell.execute_reply": "2023-02-15T15:40:03.225197Z"
    }
   },
   "outputs": [],
   "source": [
    "reference = sc.AnnData(scipy.sparse.csr_matrix(simulator.counts), obs=simulator.cellparams, var=simulator.geneparams)\n",
    "reference.obs['group'] = reference.obs['group'].astype('category')\n",
    "# fitting number of zeros vs log mean curve\n",
    "dropshape, dropmidpoint = simulator.fit_dropout()\n",
    "dropout_midpoints = [1.0,-1.0,-3.0,-5.0,-7.0]\n",
    "\n",
    "# to add technical dropout noise, we can decrease the sigmoid's dropmidpoint to increase the dropout (in simulator.countswdrop)\n",
    "sdatas = {}\n",
    "for dropout_midpoint in dropout_midpoints:\n",
    "    simulator.dropshape = dropshape\n",
    "    simulator.dropmidpoint = dropout_midpoint\n",
    "    simulator.simulate_dropouts()\n",
    "\n",
    "    sdata = sc.AnnData(scipy.sparse.csr_matrix(simulator.countswdrop), obs=simulator.cellparams, var=simulator.geneparams)\n",
    "    sdata.obs['group'] = sdata.obs['group'].astype('category')\n",
    "    \n",
    "    sdatas[dropout_midpoint] = sdata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting options"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T15:40:03.230716Z",
     "iopub.status.busy": "2023-02-15T15:40:03.230215Z",
     "iopub.status.idle": "2023-02-15T15:40:03.235929Z",
     "shell.execute_reply": "2023-02-15T15:40:03.235126Z"
    }
   },
   "outputs": [],
   "source": [
    "highres = False\n",
    "default_dpi = 100.0\n",
    "if highres:\n",
    "    matplotlib.rcParams['figure.dpi'] = 648.0\n",
    "    hr_ext = '_hd'\n",
    "else:\n",
    "    matplotlib.rcParams['figure.dpi'] = default_dpi\n",
    "    hr_ext = ''\n",
    "\n",
    "axsize = np.array([3,3])*1.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize simulated data without dropout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create UMAP for the simulated data without dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T15:40:03.239885Z",
     "iopub.status.busy": "2023-02-15T15:40:03.239410Z",
     "iopub.status.idle": "2023-02-15T15:40:30.713831Z",
     "shell.execute_reply": "2023-02-15T15:40:30.712958Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SCumap...SCprep...time 1.4392147064208984\n",
      "time 26.896665811538696\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ref_umap = tc.utils.umap_single_cell_data(reference)\n",
    "fig = tc.pl.scatter(ref_umap, keys='group', position_key='X_umap', joint=True, point_size=5, axsize=axsize, noticks=True,\n",
    "axes_labels=['UMAP 0','UMAP 1']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize simulated data with dropout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create UMAP for the simulated data with dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T15:40:30.718260Z",
     "iopub.status.busy": "2023-02-15T15:40:30.717748Z",
     "iopub.status.idle": "2023-02-15T15:40:39.549225Z",
     "shell.execute_reply": "2023-02-15T15:40:39.548322Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SCumap...SCprep...time 0.5789980888366699\n",
      "time 8.304261207580566\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 300x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tdata = sdatas[-1.0]\n",
    "tdata_umap = tc.utils.umap_single_cell_data(tdata)\n",
    "fig = tc.pl.scatter(tdata_umap, keys='group', position_key='X_umap', joint=True, point_size=5, axsize=axsize, noticks=True,\n",
    "axes_labels=['UMAP 0','UMAP 1']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Annotate the data with dropout with cell types"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Annotation is done on cell type level with multi_center=10 to capture variation within a cell type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T15:40:39.553810Z",
     "iopub.status.busy": "2023-02-15T15:40:39.553298Z",
     "iopub.status.idle": "2023-02-15T15:40:47.793012Z",
     "shell.execute_reply": "2023-02-15T15:40:47.792077Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting preprocessing\n",
      "Annotation profiles were not found in `reference.varm[\"group\"]`. Constructing reference profiles with `tacco.preprocessing.construct_reference_profiles` and default arguments...\n",
      "Finished preprocessing in 0.42 seconds.\n",
      "Starting annotation of data with shape (1500, 19737) and a reference of shape (1500, 19737) using the following wrapped method:\n",
      "+- platform normalization: platform_iterations=0, gene_keys=group, normalize_to=adata\n",
      "   +- multi center: multi_center=10 multi_center_amplitudes=True\n",
      "      +- bisection boost: bisections=4, bisection_divisor=3\n",
      "         +- core: method=OT annotation_prior=None\n",
      "mean,std( rescaling(gene) )  0.37671331182229645 0.19547104710406613\n",
      "bisection run on 1\n",
      "bisection run on 0.6666666666666667\n",
      "bisection run on 0.4444444444444444\n",
      "bisection run on 0.2962962962962963\n",
      "bisection run on 0.19753086419753085\n",
      "bisection run on 0.09876543209876543\n",
      "Finished annotation in 7.44 seconds.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 1500 × 25000\n",
       "    obs: 'group', 'libsize', 'has_program', 'program_usage', 'is_doublet', 'group2'\n",
       "    var: 'BaseGeneMean', 'is_outlier', 'outlier_ratio', 'gene_mean', 'prog_gene', 'prog_genemean', 'group1_DEratio', 'group1_genemean', 'group2_DEratio', 'group2_genemean', 'group3_DEratio', 'group3_genemean', 'group4_DEratio', 'group4_genemean', 'group5_DEratio', 'group5_genemean', 'group6_DEratio', 'group6_genemean', 'group7_DEratio', 'group7_genemean', 'group8_DEratio', 'group8_genemean', 'group9_DEratio', 'group9_genemean', 'group10_DEratio', 'group10_genemean', 'group11_DEratio', 'group11_genemean', 'group12_DEratio', 'group12_genemean', 'group13_DEratio', 'group13_genemean'\n",
       "    uns: 'TACCO_mc10'\n",
       "    obsm: 'TACCO_mc10', 'TACCO'\n",
       "    varm: 'TACCO_mc10'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tc.tl.annotate(tdata, reference, 'group', result_key='TACCO', multi_center=10, assume_valid_counts=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Benchmark annotation methods on the simulated dropout data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define parameters for the annotation methods to use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T15:40:47.797348Z",
     "iopub.status.busy": "2023-02-15T15:40:47.796849Z",
     "iopub.status.idle": "2023-02-15T15:40:47.802800Z",
     "shell.execute_reply": "2023-02-15T15:40:47.801944Z"
    }
   },
   "outputs": [],
   "source": [
    "methods = {\n",
    "    'NMFreg':{'method': 'NMFreg',},\n",
    "    'RCTD':{'method': 'RCTD', 'conda_env': f'{env_path}/RCTD_env',},\n",
    "    'SVM':{'method':'svm',},\n",
    "    'SingleR':{'method':'SingleR', 'conda_env': f'{env_path}/SingleR_env',},\n",
    "    'WOT':{'method': 'WOT',},\n",
    "    'TACCO': {'method': 'OT', 'multi_center': 10,},\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T15:40:47.806603Z",
     "iopub.status.busy": "2023-02-15T15:40:47.806145Z",
     "iopub.status.idle": "2023-02-15T17:14:06.189525Z",
     "shell.execute_reply": "2023-02-15T17:14:06.188528Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "running method NMFreg for dropout midpoint 1.0 ...done\n",
      "running method RCTD for dropout midpoint 1.0 ...done\n",
      "running method SVM for dropout midpoint 1.0 ...done\n",
      "running method SingleR for dropout midpoint 1.0 ...done\n",
      "running method WOT for dropout midpoint 1.0 ...done\n",
      "running method TACCO for dropout midpoint 1.0 ...done\n",
      "running method NMFreg for dropout midpoint -1.0 ...done\n",
      "running method RCTD for dropout midpoint -1.0 ...done\n",
      "running method SVM for dropout midpoint -1.0 ...done\n",
      "running method SingleR for dropout midpoint -1.0 ...done\n",
      "running method WOT for dropout midpoint -1.0 ...done\n",
      "running method TACCO for dropout midpoint -1.0 ...done\n",
      "running method NMFreg for dropout midpoint -3.0 ...done\n",
      "running method RCTD for dropout midpoint -3.0 ...done\n",
      "running method SVM for dropout midpoint -3.0 ...done\n",
      "running method SingleR for dropout midpoint -3.0 ...done\n",
      "running method WOT for dropout midpoint -3.0 ...done\n",
      "running method TACCO for dropout midpoint -3.0 ...done\n",
      "running method NMFreg for dropout midpoint -5.0 ...done\n",
      "running method RCTD for dropout midpoint -5.0 ...done\n",
      "running method SVM for dropout midpoint -5.0 ...done\n",
      "running method SingleR for dropout midpoint -5.0 ...done\n",
      "running method WOT for dropout midpoint -5.0 ...Starting preprocessing\n",
      "Finished preprocessing in 0.39 seconds.\n",
      "Starting annotation of data with shape (1500, 13619) and a reference of shape (1500, 13619) using the following wrapped method:\n",
      "+- core: method=WOT annotation_prior=None\n",
      "Exception in WaddingtonOT. Trying with cell normalization.\n",
      "\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/anndata/_core/anndata.py:1828: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",
      "  utils.warn_names_duplicates(\"obs\")\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:134: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  b = (q / (K.T.dot(np.multiply(a, dx)))) ** alpha2 * np.exp(-v / (lambda2 + epsilon_i))\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:138: RuntimeWarning: divide by zero encountered in log\n",
      "  u = u + epsilon_i * np.log(a)\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:140: RuntimeWarning: invalid value encountered in add\n",
      "  K = np.exp((np.array([u]).T - C + np.array([v])) / epsilon_i)\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/anndata/_core/anndata.py:1828: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",
      "  utils.warn_names_duplicates(\"obs\")\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:159: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  np.linalg.norm(_a - old_a * np.exp(u / epsilon_i)) / (1 + np.linalg.norm(_a)),\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:148: RuntimeWarning: overflow encountered in exp\n",
      "  _a = a * np.exp(u / epsilon_i)\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:159: RuntimeWarning: overflow encountered in exp\n",
      "  np.linalg.norm(_a - old_a * np.exp(u / epsilon_i)) / (1 + np.linalg.norm(_a)),\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:159: RuntimeWarning: invalid value encountered in subtract\n",
      "  np.linalg.norm(_a - old_a * np.exp(u / epsilon_i)) / (1 + np.linalg.norm(_a)),\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:133: RuntimeWarning: overflow encountered in true_divide\n",
      "  a = (p / (K.dot(np.multiply(b, dy)))) ** alpha1 * np.exp(-u / (lambda1 + epsilon_i))\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:139: RuntimeWarning: divide by zero encountered in log\n",
      "  v = v + epsilon_i * np.log(b)  # absorb\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:140: RuntimeWarning: invalid value encountered in add\n",
      "  K = np.exp((np.array([u]).T - C + np.array([v])) / epsilon_i)\n",
      "Traceback (most recent call last):\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_wot.py\", line 42, in _annotate_wot\n",
      "    tmap_annotated = ot_model.compute_transport_map(0, 1)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 231, in compute_transport_map\n",
      "    return self.compute_single_transport_map(config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 304, in compute_single_transport_map\n",
      "    tmap, learned_growth = wot.ot.compute_transport_matrix(solver=self.solver, **config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 30, in compute_transport_matrix\n",
      "    tmap = solver(**params)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 163, in optimal_transport_duality_gap\n",
      "    raise RuntimeError(\"Overflow encountered in duality gap computation, please report this incident\")\n",
      "RuntimeError: Overflow encountered in duality gap computation, please report this incident\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/workflow/simulated_dropout/temp_benchmark_sntgs8wj/benchmark_script_bxfknfzf.py\", line 22, in <module>\n",
      "    result = tc.tl.annotate(adata, reference, **kw_args)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_annotate.py\", line 802, in annotate\n",
      "    cell_type = _method(tdata, reference, annotation_key, annotation_prior, verbose)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_annotate.py\", line 119, in _method\n",
      "    cell_type = annotate(adata, reference, annotation_key, **verbose_arg, **kw_args)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_wot.py\", line 47, in _annotate_wot\n",
      "    tmap_annotated = ot_model.compute_transport_map(0, 1)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 231, in compute_transport_map\n",
      "    return self.compute_single_transport_map(config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 304, in compute_single_transport_map\n",
      "    tmap, learned_growth = wot.ot.compute_transport_matrix(solver=self.solver, **config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 30, in compute_transport_matrix\n",
      "    tmap = solver(**params)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 163, in optimal_transport_duality_gap\n",
      "    raise RuntimeError(\"Overflow encountered in duality gap computation, please report this incident\")\n",
      "RuntimeError: Overflow encountered in duality gap computation, please report this incident\n",
      "wall_clock_time_seconds 12.60\n",
      "max_memory_used_kbytes 1066564\n",
      "exit_status 1\n",
      "\n",
      "done\n",
      "running method TACCO for dropout midpoint -5.0 ...done\n",
      "running method NMFreg for dropout midpoint -7.0 ...done\n",
      "running method RCTD for dropout midpoint -7.0 ...Starting preprocessing\n",
      "Finished preprocessing in 0.33 seconds.\n",
      "Starting annotation of data with shape (1483, 6771) and a reference of shape (1500, 6771) using the following wrapped method:\n",
      "+- core: method=RCTD annotation_prior=None conda_env=/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/results/env_links/RCTD_env\n",
      " [1] \"reference.h5ad\" \"data.h5ad\"      \"result\"         \"0\"             \n",
      " [5] \"8\"              \"full\"           \"group\"          \"x\"             \n",
      " [9] \"y\"              \"7.0\"           \n",
      "[1] \"reading data\"\n",
      "[1] \"csr\"\n",
      "[1] \"reading reference\"\n",
      "[1] \"csr\"\n",
      "[1] \"running RCTD\"\n",
      "\n",
      "  1   2   3   4   5   6   7   8   9  10  11  12  13 \n",
      "110 122 102 112 112 132 110 122 108 116 120 112 121 \n",
      "\n",
      "\n",
      "Attaching package: 'SparseM'\n",
      "\n",
      "The following object is masked from 'package:base':\n",
      "\n",
      "    backsolve\n",
      "\n",
      "Begin: process_cell_type_info\n",
      "process_cell_type_info: number of cells in reference: 1499\n",
      "process_cell_type_info: number of genes in reference: 6771\n",
      "End: process_cell_type_info\n",
      "create.RCTD: getting regression differentially expressed genes: \n",
      "get_de_genes: 1 found DE genes: 31\n",
      "get_de_genes: 2 found DE genes: 25\n",
      "get_de_genes: 3 found DE genes: 26\n",
      "get_de_genes: 4 found DE genes: 18\n",
      "get_de_genes: 5 found DE genes: 25\n",
      "get_de_genes: 6 found DE genes: 22\n",
      "get_de_genes: 7 found DE genes: 16\n",
      "get_de_genes: 8 found DE genes: 23\n",
      "get_de_genes: 9 found DE genes: 29\n",
      "get_de_genes: 10 found DE genes: 18\n",
      "get_de_genes: 11 found DE genes: 18\n",
      "get_de_genes: 12 found DE genes: 19\n",
      "get_de_genes: 13 found DE genes: 16\n",
      "get_de_genes: total DE genes: 260\n",
      "create.RCTD: getting platform effect normalization differentially expressed genes: \n",
      "get_de_genes: 1 found DE genes: 54\n",
      "get_de_genes: 2 found DE genes: 42\n",
      "get_de_genes: 3 found DE genes: 62\n",
      "get_de_genes: 4 found DE genes: 40\n",
      "get_de_genes: 5 found DE genes: 56\n",
      "get_de_genes: 6 found DE genes: 44\n",
      "get_de_genes: 7 found DE genes: 35\n",
      "get_de_genes: 8 found DE genes: 48\n",
      "get_de_genes: 9 found DE genes: 49\n",
      "get_de_genes: 10 found DE genes: 48\n",
      "get_de_genes: 11 found DE genes: 43\n",
      "get_de_genes: 12 found DE genes: 28\n",
      "get_de_genes: 13 found DE genes: 38\n",
      "get_de_genes: total DE genes: 440\n",
      "fitBulk: decomposing bulk\n",
      "Error in choose_sigma_c(RCTD) : \n",
      "  choose_sigma_c determined a N_fit of 0! This is probably due to unusually low UMI counts per bead in your dataset. Try decreasing the parameter UMI_min_sigma. It currently is 7.0 but none of the beads had counts larger than that.\n",
      "Calls: run.RCTD -> choose_sigma_c\n",
      "Execution halted\n",
      "\n",
      "\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_RCTD.py:239: ImplicitModificationWarning: Trying to modify attribute `.obs` of view, initializing view as actual.\n",
      "  adata.obs[x_coord_name] = 0\n",
      "Traceback (most recent call last):\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/workflow/simulated_dropout/temp_benchmark_yz4_fh5y/benchmark_script_jq4d9rx5.py\", line 22, in <module>\n",
      "    result = tc.tl.annotate(adata, reference, **kw_args)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_annotate.py\", line 802, in annotate\n",
      "    cell_type = _method(tdata, reference, annotation_key, annotation_prior, verbose)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_annotate.py\", line 119, in _method\n",
      "    cell_type = annotate(adata, reference, annotation_key, **verbose_arg, **kw_args)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_RCTD.py\", line 273, in annotate_RCTD\n",
      "    raise Exception('RCTD did not work properly!')\n",
      "Exception: RCTD did not work properly!\n",
      "wall_clock_time_seconds 18.20\n",
      "max_memory_used_kbytes 510112\n",
      "exit_status 1\n",
      "\n",
      "done\n",
      "running method SVM for dropout midpoint -7.0 ...done\n",
      "running method SingleR for dropout midpoint -7.0 ...done\n",
      "running method WOT for dropout midpoint -7.0 ...Starting preprocessing\n",
      "Finished preprocessing in 0.33 seconds.\n",
      "Starting annotation of data with shape (1483, 6771) and a reference of shape (1500, 6771) using the following wrapped method:\n",
      "+- core: method=WOT annotation_prior=None\n",
      "Exception in WaddingtonOT. Trying with cell normalization.\n",
      "\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/anndata/_core/anndata.py:1828: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",
      "  utils.warn_names_duplicates(\"obs\")\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:134: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  b = (q / (K.T.dot(np.multiply(a, dx)))) ** alpha2 * np.exp(-v / (lambda2 + epsilon_i))\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:138: RuntimeWarning: divide by zero encountered in log\n",
      "  u = u + epsilon_i * np.log(a)\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:140: RuntimeWarning: invalid value encountered in add\n",
      "  K = np.exp((np.array([u]).T - C + np.array([v])) / epsilon_i)\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/anndata/_core/anndata.py:1828: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",
      "  utils.warn_names_duplicates(\"obs\")\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:159: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  np.linalg.norm(_a - old_a * np.exp(u / epsilon_i)) / (1 + np.linalg.norm(_a)),\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:148: RuntimeWarning: overflow encountered in exp\n",
      "  _a = a * np.exp(u / epsilon_i)\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:159: RuntimeWarning: overflow encountered in exp\n",
      "  np.linalg.norm(_a - old_a * np.exp(u / epsilon_i)) / (1 + np.linalg.norm(_a)),\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:159: RuntimeWarning: invalid value encountered in subtract\n",
      "  np.linalg.norm(_a - old_a * np.exp(u / epsilon_i)) / (1 + np.linalg.norm(_a)),\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:133: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  a = (p / (K.dot(np.multiply(b, dy)))) ** alpha1 * np.exp(-u / (lambda1 + epsilon_i))\n",
      "/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py:133: RuntimeWarning: overflow encountered in true_divide\n",
      "  a = (p / (K.dot(np.multiply(b, dy)))) ** alpha1 * np.exp(-u / (lambda1 + epsilon_i))\n",
      "Traceback (most recent call last):\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_wot.py\", line 42, in _annotate_wot\n",
      "    tmap_annotated = ot_model.compute_transport_map(0, 1)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 231, in compute_transport_map\n",
      "    return self.compute_single_transport_map(config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 304, in compute_single_transport_map\n",
      "    tmap, learned_growth = wot.ot.compute_transport_matrix(solver=self.solver, **config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 30, in compute_transport_matrix\n",
      "    tmap = solver(**params)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 163, in optimal_transport_duality_gap\n",
      "    raise RuntimeError(\"Overflow encountered in duality gap computation, please report this incident\")\n",
      "RuntimeError: Overflow encountered in duality gap computation, please report this incident\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/workflow/simulated_dropout/temp_benchmark_53yspg0j/benchmark_script_k4mku6of.py\", line 22, in <module>\n",
      "    result = tc.tl.annotate(adata, reference, **kw_args)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_annotate.py\", line 802, in annotate\n",
      "    cell_type = _method(tdata, reference, annotation_key, annotation_prior, verbose)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_annotate.py\", line 119, in _method\n",
      "    cell_type = annotate(adata, reference, annotation_key, **verbose_arg, **kw_args)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco/tacco/tools/_wot.py\", line 47, in _annotate_wot\n",
      "    tmap_annotated = ot_model.compute_transport_map(0, 1)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 231, in compute_transport_map\n",
      "    return self.compute_single_transport_map(config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/ot_model.py\", line 304, in compute_single_transport_map\n",
      "    tmap, learned_growth = wot.ot.compute_transport_matrix(solver=self.solver, **config)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 30, in compute_transport_matrix\n",
      "    tmap = solver(**params)\n",
      "  File \"/ahg/regevdata/projects/mouse_CRC/rerun/tacco_examples_devel/.snakemake/conda/1d2a210995279fd3d78066142f3cf09b/lib/python3.9/site-packages/wot/ot/optimal_transport.py\", line 163, in optimal_transport_duality_gap\n",
      "    raise RuntimeError(\"Overflow encountered in duality gap computation, please report this incident\")\n",
      "RuntimeError: Overflow encountered in duality gap computation, please report this incident\n",
      "wall_clock_time_seconds 10.58\n",
      "max_memory_used_kbytes 725876\n",
      "exit_status 1\n",
      "\n",
      "done\n",
      "running method TACCO for dropout midpoint -7.0 ...done\n"
     ]
    }
   ],
   "source": [
    "results = {}\n",
    "for dropout_midpoint in dropout_midpoints:\n",
    "    for method,params in methods.items():\n",
    "        print(f'running method {method} for dropout midpoint {dropout_midpoint} ...', end='')\n",
    "        try:\n",
    "            results[(dropout_midpoint,method)] = tc.benchmarking.benchmark_annotate(sdatas[dropout_midpoint],reference,annotation_key='group',**params, assume_valid_counts=True);\n",
    "        except:\n",
    "            pass # catch failing methods\n",
    "        print(f'done')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T17:14:06.193427Z",
     "iopub.status.busy": "2023-02-15T17:14:06.192950Z",
     "iopub.status.idle": "2023-02-15T17:14:06.368597Z",
     "shell.execute_reply": "2023-02-15T17:14:06.367738Z"
    }
   },
   "outputs": [],
   "source": [
    "for (dropout_midpoint,method),result in results.items():\n",
    "    unused_key = tc.utils.find_unused_key(sdatas[dropout_midpoint].obsm)\n",
    "    sdatas[dropout_midpoint].obsm[unused_key] = results[(dropout_midpoint,method)]['annotation']\n",
    "    max_correct = tc.ev.compute_err(sdatas[dropout_midpoint], unused_key, 'group', err_method='max_correct')[unused_key]\n",
    "    del sdatas[dropout_midpoint].obsm[unused_key]\n",
    "    results[(dropout_midpoint,method)]['max_correct'] = max_correct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T17:14:06.372674Z",
     "iopub.status.busy": "2023-02-15T17:14:06.372244Z",
     "iopub.status.idle": "2023-02-15T17:14:06.379856Z",
     "shell.execute_reply": "2023-02-15T17:14:06.379117Z"
    }
   },
   "outputs": [],
   "source": [
    "res_df = pd.DataFrame([\n",
    "    [dropout_midpoint,method,v['max_correct'],v['max_mem_usage_GB'],v['benchmark_time_s']]\n",
    "    for (dropout_midpoint,method),v in results.items()\n",
    "],columns=['dropout_midpoint','method','max_correct','memory (GB)','time (s)'])\n",
    "quantities = [c for c in res_df.columns if c not in ['dropout_midpoint','method'] ]\n",
    "methods = res_df['method'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-15T17:14:06.383435Z",
     "iopub.status.busy": "2023-02-15T17:14:06.383028Z",
     "iopub.status.idle": "2023-02-15T17:14:06.991511Z",
     "shell.execute_reply": "2023-02-15T17:14:06.990805Z"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 160x460 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axs = tc.pl.subplots(1,len(quantities), axsize=np.array([4,3])*0.4, x_padding=0.7, y_padding=0.5)\n",
    "colors = {m:common_code.method_color(m) for m in methods}\n",
    "styles = {m:common_code.method_style(m) for m in methods}\n",
    "res_df = res_df.loc[~res_df[quantities].isna().all(axis=1)]\n",
    "for iy_ax, qty in enumerate(quantities):\n",
    "    ax = axs[iy_ax,0]\n",
    "\n",
    "    x = res_df['dropout_midpoint']\n",
    "    y = res_df[qty]\n",
    "\n",
    "    if qty == 'time (s)': # part 1 of adding second, minute and hour marker: plot the lines under the data\n",
    "\n",
    "        ynew = np.array([0.1,1,10,60,600,3600,36000])\n",
    "        ynew_minor = np.concatenate([np.arange(0.1,1,0.1),np.arange(1,10,1),np.arange(10,60,10),np.arange(60,600,60),np.arange(600,3600,600),np.arange(3600,36000,3600)]).flatten()\n",
    "        ynewlabels = np.array(['0.1s','1s','10s','1min','10min','1h','10h'])\n",
    "        ymin = y.min() * 0.5\n",
    "        ymax = y.max() * 2.0\n",
    "        ynewlabels = ynewlabels[(ynew > ymin) & (ynew < ymax)]\n",
    "        ynew = ynew[(ynew > ymin) & (ynew < ymax)]\n",
    "        ynew_minor = ynew_minor[(ynew_minor > ymin) & (ynew_minor < ymax)]\n",
    "        for yn in ynew:\n",
    "            ax.axhline(yn, color='gray', linewidth=0.5)\n",
    "\n",
    "    elif qty == 'memory (GB)':\n",
    "\n",
    "        ynew = np.array([0.1,0.4,1,4,10,40,100])\n",
    "        ynew_minor = np.concatenate([np.arange(0.1,1,0.1),np.arange(1,10,1),np.arange(10,100,10),np.arange(100,1000,100)]).flatten()\n",
    "        ynewlabels = np.array(['0.1GB','0.4GB','1GB','4GB','10GB','40GB','100GB'])\n",
    "        ymin = y.min() * 0.5\n",
    "        ymax = y.max() * 2.0\n",
    "        ynewlabels = ynewlabels[(ynew > ymin) & (ynew < ymax)]\n",
    "        ynew = ynew[(ynew > ymin) & (ynew < ymax)]\n",
    "        ynew_minor = ynew_minor[(ynew_minor > ymin) & (ynew_minor < ymax)]\n",
    "        for yn in ynew:\n",
    "            ax.axhline(yn, color='gray', linewidth=0.5)\n",
    "\n",
    "    for m in methods:\n",
    "        selector = res_df['method'] == m\n",
    "        if selector.sum() == 0:\n",
    "            continue\n",
    "        ax.plot(x[selector],y[selector],label=m,marker='o',color=colors[m],ls=styles[m],)\n",
    "    if iy_ax == axs.shape[0] - 1:\n",
    "        ax.set_xlabel('bead size')\n",
    "    if qty == 'time (s)':\n",
    "        ax.set_ylabel('runtime')\n",
    "    elif qty == 'memory (GB)':\n",
    "        ax.set_ylabel('memory')\n",
    "    else:\n",
    "        ax.set_ylabel(f'{qty}')\n",
    "    if qty in ['time (s)','memory (GB)']:\n",
    "        ax.set_yscale('log')\n",
    "\n",
    "    if qty in ['time (s)','memory (GB)']: # part 2 off adding second, minute and hour marker: add the second y axis after rescaling the first y axis to log scale\n",
    "        ax.set_yticks(ynew_minor,minor=True)\n",
    "        ax.set_yticks(ynew)\n",
    "        ax.set_yticklabels(ynewlabels)\n",
    "        ax.set_yticklabels([],minor=True)\n",
    "\n",
    "    if iy_ax == 0:\n",
    "        ax.legend(bbox_to_anchor=(1, 1), loc='upper left', ncol=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
